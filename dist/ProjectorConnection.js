"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _ProjectorConnection_path, _ProjectorConnection_baudRate, _ProjectorConnection_port;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProjectorConnection = exports.ReadCommands = exports.ActionCommands = void 0;
const serialport_1 = require("serialport");
const PowerOn = [0x06, 0x14, 0x00, 0x04, 0x00, 0x34, 0x11, 0x00, 0x00, 0x5D];
const PowerOff = [0x06, 0x14, 0x00, 0x04, 0x00, 0x34, 0x11, 0x01, 0x00, 0x5E];
const Power = [0x07, 0x14, 0x00, 0x05, 0x00, 0x34, 0x00, 0x00, 0x11, 0x00, 0x5E];
const ResetAllSettings = [0x06, 0x14, 0x00, 0x04, 0x00, 0x34, 0x11, 0x02, 0x00, 0x5F];
const ResetColorSettings = [0x06, 0x14, 0x00, 0x04, 0x00, 0x34, 0x11, 0x2A, 0x00, 0x87];
const SplashScreenBlack = [0x06, 0x14, 0x00, 0x04, 0x00, 0x34, 0x11, 0x0A, 0x00, 0x67];
const SplashScreenBlue = [0x06, 0x14, 0x00, 0x04, 0x00, 0x34, 0x11, 0x0A, 0x01, 0x68];
const SplashScreenViewSonic = [0x06, 0x14, 0x00, 0x04, 0x00, 0x34, 0x11, 0x0A, 0x02, 0x69];
const SplashScreenScreenCapture = [0x06, 0x14, 0x00, 0x04, 0x00, 0x34, 0x11, 0x0A, 0x03, 0x6A];
const SplashScreenOff = [0x06, 0x14, 0x00, 0x04, 0x00, 0x34, 0x11, 0x0A, 0x04, 0x6B];
const SplashScreen = [0x07, 0x14, 0x00, 0x05, 0x00, 0x34, 0x00, 0x00, 0x11, 0x0A, 0x68];
const QuickPowerOffOn = [0x06, 0x14, 0x00, 0x04, 0x00, 0x34, 0x11, 0x0B, 0x00, 0x68];
const QuickPowerOffOff = [0x06, 0x14, 0x00, 0x04, 0x00, 0x34, 0x11, 0x0B, 0x01, 0x69];
const QuickPowerOff = [0x07, 0x14, 0x00, 0x05, 0x00, 0x34, 0x00, 0x00, 0x11, 0x0B, 0x69];
const HighAltitudeModeOn = [0x06, 0x14, 0x00, 0x04, 0x00, 0x34, 0x11, 0x0C, 0x00, 0x69];
const HighAltitudeModeOff = [0x06, 0x14, 0x00, 0x04, 0x00, 0x34, 0x11, 0x0C, 0x01, 0x6A];
const HighAltitudeMode = [0x07, 0x14, 0x00, 0x05, 0x00, 0x34, 0x00, 0x00, 0x11, 0x0C, 0x6A];
const LampModeNormal = [0x06, 0x14, 0x00, 0x04, 0x00, 0x34, 0x11, 0x10, 0x00, 0x6D];
const LampModeEco = [0x06, 0x14, 0x00, 0x04, 0x00, 0x34, 0x11, 0x10, 0x01, 0x6E];
const LampModeDynamic = [0x06, 0x14, 0x00, 0x04, 0x00, 0x34, 0x11, 0x10, 0x02, 0x6F];
const LampModeSleep = [0x06, 0x14, 0x00, 0x04, 0x00, 0x34, 0x11, 0x10, 0x03, 0x70];
const LampMode = [0x07, 0x14, 0x00, 0x05, 0x00, 0x34, 0x00, 0x00, 0x11, 0x10, 0x6E];
const ProjectorPositionTableFront = [0x06, 0x14, 0x00, 0x04, 0x00, 0x34, 0x12, 0x00, 0x00, 0x5E];
const ProjectorPositionTableBack = [0x06, 0x14, 0x00, 0x04, 0x00, 0x34, 0x12, 0x00, 0x01, 0x5F];
const ProjectorPositionCeilingFont = [0x06, 0x14, 0x00, 0x04, 0x00, 0x34, 0x12, 0x00, 0x02, 0x60];
const ProjectorPositionCeilingBack = [0x06, 0x14, 0x00, 0x04, 0x00, 0x34, 0x12, 0x00, 0x03, 0x61];
const ProjectorPosition = [0x07, 0x14, 0x00, 0x05, 0x00, 0x34, 0x00, 0x00, 0x12, 0x00, 0x5F];
const ContrastDecrease = [0x06, 0x14, 0x00, 0x04, 0x00, 0x34, 0x12, 0x02, 0x00, 0x60];
const ContrastIncrease = [0x06, 0x14, 0x00, 0x04, 0x00, 0x34, 0x12, 0x02, 0x01, 0x61];
const Contrast = [0x07, 0x14, 0x00, 0x05, 0x00, 0x34, 0x00, 0x00, 0x12, 0x02, 0x61];
const BrightnessDecrease = [0x06, 0x14, 0x00, 0x04, 0x00, 0x34, 0x12, 0x03, 0x00, 0x61];
const BrightnessIncrease = [0x06, 0x14, 0x00, 0x04, 0x00, 0x34, 0x12, 0x03, 0x01, 0x62];
const Brightness = [0x07, 0x14, 0x00, 0x05, 0x00, 0x34, 0x00, 0x00, 0x12, 0x03, 0x62];
const AspectRatioAuto = [0x06, 0x14, 0x00, 0x04, 0x00, 0x34, 0x12, 0x04, 0x00, 0x62];
const AspectRatio4x3 = [0x06, 0x14, 0x00, 0x04, 0x00, 0x34, 0x12, 0x04, 0x02, 0x64];
const AspectRatio16x9 = [0x06, 0x14, 0x00, 0x04, 0x00, 0x34, 0x12, 0x04, 0x03, 0x65];
const AspectRatio16x10 = [0x06, 0x14, 0x00, 0x04, 0x00, 0x34, 0x12, 0x04, 0x04, 0x66];
const AspectRatioAnamorphic = [0x06, 0x14, 0x00, 0x04, 0x00, 0x34, 0x12, 0x04, 0x05, 0x67];
const AspectRatioWide = [0x06, 0x14, 0x00, 0x04, 0x00, 0x34, 0x12, 0x04, 0x06, 0x68];
const AspectRatio235x1 = [0x06, 0x14, 0x00, 0x04, 0x00, 0x34, 0x12, 0x04, 0x07, 0x69];
const AspectRatioPanorama = [0x06, 0x14, 0x00, 0x04, 0x00, 0x34, 0x12, 0x04, 0x08, 0x6A];
const AspectRatio = [0x07, 0x14, 0x00, 0x05, 0x00, 0x34, 0x00, 0x00, 0x12, 0x04, 0x63];
const HorizontalPositionLeft = [0x06, 0x14, 0x00, 0x04, 0x00, 0x34, 0x12, 0x06, 0x01, 0x65];
const HorizontalPositionRight = [0x06, 0x14, 0x00, 0x04, 0x00, 0x34, 0x12, 0x06, 0x00, 0x64];
const HorizontalPosition = [0x07, 0x14, 0x00, 0x05, 0x00, 0x34, 0x00, 0x00, 0x12, 0x06, 0x65];
const VerticalPositionUp = [0x06, 0x14, 0x00, 0x04, 0x00, 0x34, 0x12, 0x07, 0x00, 0x65];
const VerticalPositionDown = [0x06, 0x14, 0x00, 0x04, 0x00, 0x34, 0x12, 0x07, 0x01, 0x66];
const VerticalPosition = [0x07, 0x14, 0x00, 0x05, 0x00, 0x34, 0x00, 0x00, 0x12, 0x07, 0x66];
const ColorTemperatureWarm = [0x06, 0x14, 0x00, 0x04, 0x00, 0x34, 0x12, 0x08, 0x00, 0x66];
const ColorTemperatureNormal = [0x06, 0x14, 0x00, 0x04, 0x00, 0x34, 0x12, 0x08, 0x01, 0x67];
const ColorTemperatureNeutral = [0x06, 0x14, 0x00, 0x04, 0x00, 0x34, 0x12, 0x08, 0x02, 0x68];
const ColorTemperatureCool = [0x06, 0x14, 0x00, 0x04, 0x00, 0x34, 0x12, 0x08, 0x03, 0x69];
const ColorTemperature = [0x07, 0x14, 0x00, 0x05, 0x00, 0x34, 0x00, 0x00, 0x12, 0x08, 0x67];
const BlankOn = [0x06, 0x14, 0x00, 0x04, 0x00, 0x34, 0x12, 0x09, 0x01, 0x68];
const BlankOff = [0x06, 0x14, 0x00, 0x04, 0x00, 0x34, 0x12, 0x09, 0x00, 0x67];
const Blank = [0x07, 0x14, 0x00, 0x05, 0x00, 0x34, 0x00, 0x00, 0x12, 0x09, 0x68];
const KeystoneVerticalDecrease = [0x06, 0x14, 0x00, 0x04, 0x00, 0x34, 0x12, 0x0A, 0x00, 0x68];
const KeystoneVerticalIncrease = [0x06, 0x14, 0x00, 0x04, 0x00, 0x34, 0x12, 0x0A, 0x01, 0x69];
const KeystoneVertical = [0x07, 0x14, 0x00, 0x05, 0x00, 0x34, 0x00, 0x00, 0x12, 0x0A, 0x69];
const KeystoneHorizontalDecrease = [0x06, 0x14, 0x00, 0x04, 0x00, 0x34, 0x11, 0x31, 0x00, 0x8E];
const KeystoneHorizontalIncrease = [0x06, 0x14, 0x00, 0x04, 0x00, 0x34, 0x11, 0x31, 0x01, 0x8F];
const KeystoneHorizontal = [0x07, 0x14, 0x00, 0x05, 0x00, 0x34, 0x00, 0x00, 0x11, 0x31, 0x8F];
const ColorModeBrightest = [0x06, 0x14, 0x00, 0x04, 0x00, 0x34, 0x12, 0x0B, 0x00, 0x69];
const ColorModeMovie = [0x06, 0x14, 0x00, 0x04, 0x00, 0x34, 0x12, 0x0B, 0x01, 0x6A];
const ColorModeStandard = [0x06, 0x14, 0x00, 0x04, 0x00, 0x34, 0x12, 0x0B, 0x04, 0x6D];
const ColorModeViewMatch = [0x06, 0x14, 0x00, 0x04, 0x00, 0x34, 0x12, 0x0B, 0x05, 0x6E];
const ColorModeDynamic = [0x06, 0x14, 0x00, 0x04, 0x00, 0x34, 0x12, 0x0B, 0x08, 0x71];
const ColorMode = [0x07, 0x14, 0x00, 0x05, 0x00, 0x34, 0x00, 0x00, 0x12, 0x0B, 0x6A];
const HueDecrease = [0x06, 0x14, 0x00, 0x04, 0x00, 0x34, 0x12, 0x11, 0x00, 0x6F];
const HueIncrease = [0x06, 0x14, 0x00, 0x04, 0x00, 0x34, 0x12, 0x11, 0x01, 0x70];
const Hue = [0x07, 0x14, 0x00, 0x05, 0x00, 0x34, 0x00, 0x00, 0x12, 0x11, 0x70];
const SaturationDecrease = [0x06, 0x14, 0x00, 0x04, 0x00, 0x34, 0x12, 0x12, 0x00, 0x70];
const SaturationIncrease = [0x06, 0x14, 0x00, 0x04, 0x00, 0x34, 0x12, 0x12, 0x01, 0x71];
const Saturation = [0x07, 0x14, 0x00, 0x05, 0x00, 0x34, 0x00, 0x00, 0x12, 0x12, 0x71];
const GainDecrease = [0x06, 0x14, 0x00, 0x04, 0x00, 0x34, 0x12, 0x13, 0x00, 0x71];
const GainIncrease = [0x06, 0x14, 0x00, 0x04, 0x00, 0x34, 0x12, 0x13, 0x01, 0x72];
const Gain = [0x07, 0x14, 0x00, 0x05, 0x00, 0x34, 0x00, 0x00, 0x12, 0x13, 0x72];
const FreezeOn = [0x06, 0x14, 0x00, 0x04, 0x00, 0x34, 0x13, 0x00, 0x01, 0x60];
const FreezeOff = [0x06, 0x14, 0x00, 0x04, 0x00, 0x34, 0x13, 0x00, 0x00, 0x5F];
const Freeze = [0x07, 0x14, 0x00, 0x05, 0x00, 0x34, 0x00, 0x00, 0x13, 0x00, 0x60];
const InputVGA1 = [0x06, 0x14, 0x00, 0x04, 0x00, 0x34, 0x13, 0x01, 0x00, 0x60];
const InputVGA2 = [0x06, 0x14, 0x00, 0x04, 0x00, 0x34, 0x13, 0x01, 0x08, 0x68];
const InputHDMI = [0x06, 0x14, 0x00, 0x04, 0x00, 0x34, 0x13, 0x01, 0x03, 0x63];
const InputComposite = [0x06, 0x14, 0x00, 0x04, 0x00, 0x34, 0x13, 0x01, 0x05, 0x65];
const InputSVideo = [0x06, 0x14, 0x00, 0x04, 0x00, 0x34, 0x13, 0x01, 0x06, 0x66];
const Input = [0x07, 0x14, 0x00, 0x05, 0x00, 0x34, 0x00, 0x00, 0x13, 0x01, 0x61];
const QuickAutoSearchOn = [0x06, 0x14, 0x00, 0x04, 0x00, 0x34, 0x13, 0x02, 0x01, 0x62];
const QuickAutoSearchOff = [0x06, 0x14, 0x00, 0x04, 0x00, 0x34, 0x13, 0x02, 0x00, 0x61];
const QuickAutoSearch = [0x07, 0x14, 0x00, 0x05, 0x00, 0x34, 0x00, 0x00, 0x13, 0x02, 0x62];
const MuteOn = [0x06, 0x14, 0x00, 0x04, 0x00, 0x34, 0x14, 0x00, 0x01, 0x61];
const MuteOff = [0x06, 0x14, 0x00, 0x04, 0x00, 0x34, 0x14, 0x00, 0x00, 0x60];
const Mute = [0x07, 0x14, 0x00, 0x05, 0x00, 0x34, 0x00, 0x00, 0x14, 0x00, 0x61];
const VolumeUp = [0x06, 0x14, 0x00, 0x04, 0x00, 0x34, 0x14, 0x01, 0x00, 0x61];
const VolumeDown = [0x06, 0x14, 0x00, 0x04, 0x00, 0x34, 0x14, 0x02, 0x00, 0x62];
const Volume = [0x07, 0x14, 0x00, 0x05, 0x00, 0x34, 0x00, 0x00, 0x14, 0x03, 0x64];
exports.ActionCommands = {
    PowerOn,
    PowerOff,
    ResetAllSettings,
    ResetColorSettings,
    SplashScreenBlack,
    SplashScreenBlue,
    SplashScreenViewSonic,
    SplashScreenScreenCapture,
    SplashScreenOff,
    QuickPowerOffOn,
    QuickPowerOffOff,
    HighAltitudeModeOn,
    HighAltitudeModeOff,
    LampModeNormal,
    LampModeEco,
    LampModeDynamic,
    LampModeSleep,
    ProjectorPositionTableFront,
    ProjectorPositionTableBack,
    ProjectorPositionCeilingFont,
    ProjectorPositionCeilingBack,
    ContrastDecrease,
    ContrastIncrease,
    BrightnessDecrease,
    BrightnessIncrease,
    AspectRatioAuto,
    AspectRatio4x3,
    AspectRatio16x9,
    AspectRatio16x10,
    AspectRatioAnamorphic,
    AspectRatioWide,
    AspectRatio235x1,
    AspectRatioPanorama,
    HorizontalPositionLeft,
    HorizontalPositionRight,
    VerticalPositionUp,
    VerticalPositionDown,
    ColorTemperatureWarm,
    ColorTemperatureNormal,
    ColorTemperatureNeutral,
    ColorTemperatureCool,
    BlankOn,
    BlankOff,
    KeystoneVerticalIncrease,
    KeystoneVerticalDecrease,
    KeystoneHorizontalIncrease,
    KeystoneHorizontalDecrease,
    ColorModeBrightest,
    ColorModeMovie,
    ColorModeStandard,
    ColorModeViewMatch,
    ColorModeDynamic,
    HueDecrease,
    HueIncrease,
    SaturationDecrease,
    SaturationIncrease,
    GainDecrease,
    GainIncrease,
    FreezeOn,
    FreezeOff,
    InputVGA1,
    InputVGA2,
    InputHDMI,
    InputComposite,
    InputSVideo,
    QuickAutoSearchOn,
    QuickAutoSearchOff,
    MuteOn,
    MuteOff,
    VolumeUp,
    VolumeDown
};
exports.ReadCommands = {
    Power,
    SplashScreen,
    QuickPowerOff,
    HighAltitudeMode,
    LampMode,
    ProjectorPosition,
    Contrast,
    Brightness,
    AspectRatio,
    HorizontalPosition,
    VerticalPosition,
    ColorTemperature,
    Blank,
    KeystoneVertical,
    KeystoneHorizontal,
    ColorMode,
    Hue,
    Saturation,
    Gain,
    Freeze,
    Input,
    QuickAutoSearch,
    Mute,
    Volume
};
const ReadMap = {
    QuickPowerOff: (v) => v === 1 ? 0 : 1,
    HighAltitudeMode: (v) => v === 1 ? 0 : 1,
    KeystoneVertical: (v) => v > 40 ? v - 256 : v,
    KeystoneHorizontal: (v) => v > 40 ? v - 256 : v,
};
class ProjectorConnection {
    constructor(path, baudRate) {
        _ProjectorConnection_path.set(this, void 0);
        _ProjectorConnection_baudRate.set(this, void 0);
        _ProjectorConnection_port.set(this, void 0);
        __classPrivateFieldSet(this, _ProjectorConnection_path, path, "f");
        __classPrivateFieldSet(this, _ProjectorConnection_baudRate, baudRate, "f");
        __classPrivateFieldSet(this, _ProjectorConnection_port, undefined, "f");
    }
    open() {
        return __awaiter(this, void 0, void 0, function* () {
            const port = new serialport_1.SerialPort({ path: __classPrivateFieldGet(this, _ProjectorConnection_path, "f"), baudRate: __classPrivateFieldGet(this, _ProjectorConnection_baudRate, "f"), autoOpen: false });
            yield new Promise((resolve, reject) => {
                port.open((err) => {
                    if (err)
                        return reject(err);
                    resolve();
                });
            });
            __classPrivateFieldSet(this, _ProjectorConnection_port, port, "f");
        });
    }
    doAction(command) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!__classPrivateFieldGet(this, _ProjectorConnection_port, "f"))
                throw "Must call open on ProjectorConnection before using it.";
            const data = exports.ActionCommands[command];
            if (!data)
                throw "Invalid Command";
            return yield new Promise((resolve, reject) => {
                var _a;
                (_a = __classPrivateFieldGet(this, _ProjectorConnection_port, "f")) === null || _a === void 0 ? void 0 : _a.write(data, undefined, (err) => {
                    var _a;
                    if (err)
                        return reject(err);
                    (_a = __classPrivateFieldGet(this, _ProjectorConnection_port, "f")) === null || _a === void 0 ? void 0 : _a.drain((err) => {
                        if (err)
                            return reject(err);
                        resolve();
                    });
                });
            });
        });
    }
    read(command) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!__classPrivateFieldGet(this, _ProjectorConnection_port, "f"))
                throw "Must call open on ProjectorConnection before using it.";
            const data = exports.ReadCommands[command];
            if (!data)
                throw "Invalid Command";
            return yield new Promise((resolve, reject) => {
                var _a, _b, _c;
                const listener = (buffer) => {
                    var _a;
                    (_a = __classPrivateFieldGet(this, _ProjectorConnection_port, "f")) === null || _a === void 0 ? void 0 : _a.off('data', listener);
                    let value = buffer.at(buffer.length - 1) || 0;
                    if (ReadMap[command])
                        value = ReadMap[command](value);
                    resolve(value);
                };
                const parser = (_a = __classPrivateFieldGet(this, _ProjectorConnection_port, "f")) === null || _a === void 0 ? void 0 : _a.pipe(new serialport_1.InterByteTimeoutParser({ interval: 1000 }));
                (_b = __classPrivateFieldGet(this, _ProjectorConnection_port, "f")) === null || _b === void 0 ? void 0 : _b.on('data', listener);
                (_c = __classPrivateFieldGet(this, _ProjectorConnection_port, "f")) === null || _c === void 0 ? void 0 : _c.write(data, undefined, (err) => {
                    var _a;
                    if (err) {
                        (_a = __classPrivateFieldGet(this, _ProjectorConnection_port, "f")) === null || _a === void 0 ? void 0 : _a.off('data', listener);
                        return reject(err);
                    }
                });
            });
        });
    }
    negativeCommand(command) {
        switch (command) {
            case 'Power': return "PowerOff";
            case 'Volume': return 'VolumeDown';
            case 'KeystoneVertical': return 'KeystoneVerticalDecrease';
            case 'KeystoneHorizontal': return 'KeystoneHorizontalDecrease';
            default: return null;
        }
    }
    positiveCommand(command) {
        switch (command) {
            case 'Power': return "PowerOn";
            case 'Volume': return 'VolumeUp';
            case 'KeystoneVertical': return 'KeystoneVerticalIncrease';
            case 'KeystoneHorizontal': return 'KeystoneHorizontalIncrease';
            default: return null;
        }
    }
}
exports.ProjectorConnection = ProjectorConnection;
_ProjectorConnection_path = new WeakMap(), _ProjectorConnection_baudRate = new WeakMap(), _ProjectorConnection_port = new WeakMap();
